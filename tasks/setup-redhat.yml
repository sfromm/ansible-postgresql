---
- name: install postgresql yum repository
  package: name={{ postgresql_yum_repo_url }} state=present
  when: postgresql_yum_repo_url is defined

- name: install postgresql yum rpm key
  rpm_key: key={{ postgresql_yum_rpm_key }} state=present
  when: postgresql_yum_repo_url is defined

- name: install postgresql packages
  package: >-
    name={{ item }}
    state=installed
  with_items: "{{ postgresql_packages }}"
  register: postgresql_install_packages

- name: get default postgresql version
  environment:
    LC_ALL: 'C'
  shell: rpm -q --queryformat='%{Version}' postgresql | sed -e 's/\.[0-9]*$//g'
  register: postgresql_rpm_version
  changed_when: False
  check_mode: no

- name: set postgresql_version fact
  set_fact:
    postgresql_version: "{{ postgresql_rpm_version.stdout }}"

- name: update pgdata bash_profile
  lineinfile: >-
    dest={{ postgresql_base_directory }}/.bash_profile
    regexp="^PGDATA="
    line="PGDATA={{ postgresql_data_directory }}"
    backup=yes

- name: template postgresql.service to override PGDATA as needed
  template: >-
    src=postgresql.service.j2
    dest=/etc/systemd/system/postgresql.service
    owner=root
    group=root
    mode=0644

- name: create postgresql data path
  file: >-
    path={{ postgresql_data_directory }}
    state=directory
    owner=postgres
    group=postgres
    mode=0700

- name: initialize postgresql if necessary
  command: >-
    creates={{ postgresql_data_directory }}/PG_VERSION
    {{ postgresql_bin_directory }}/postgresql-setup initdb
  notify: restart postgresql

- name: create postgresql backup path
  file: >-
    path={{ postgresql_backup_directory }}
    state=directory
    owner=postgres
    group=postgres
    mode=0700
